# packages
library(readxl)
library(expm)
library(numDeriv)
library(Metrics)
library(csv)
library(data.table)
library(car)
library(NMOF)

# clear all objects from the workspace
rm(list = ls()) 

# current working directory
getwd()

# read excel spot data
df.spot <- read_excel("data.xlsx")

# degree of polynom
n <- 2
sigma_type <- "symmetric" # (choose triangular/diagonal/symmetric

# setup
dt <- 1/12 # monthly (1/52 weekly)
nf <- n+2
v.ymd  <- df.spot[,1] # date 
m.spot <- as.matrix(df.spot[,-1]) # data matrix
v.mat  <- as.numeric(colnames(df.spot)[-1]) # maturity range
nmat <- length(v.mat) # number of maturities

# initial parameters
vT<- v.mat
t <- 0

#lower triangular matrix (sigma init)
low_tri_matrix<-c(1)
for (x in 1:(n+1)) {
  low_tri_matrix<-c(low_tri_matrix,c(rep(0,x), 1))
}

# lower triangular matrix with c() through rows
low_tri_matrix_c_r<-function(c)
{
  k <-c
  M <- matrix(0,nrow = nf,ncol = nf)
  for (x in 1:nf) {
    M[x,1:x]<-k[1:x]
    k<-k[-c(1:x)]
  }
  return(M)
}

# initial parameters according to sigma type
init_para<-function(){
  if (sigma_type=="triangular" | sigma_type=="symmetric") { 
    return(c(
      rep(1, nf), # kappa
      low_tri_matrix, # sigma
      rep(0, nf), # theta
      0.600, # lambda
      rep(0.000524, nmat) # measurement error (# maturities)
    ))
  } else if (sigma_type=="diagonal") {
    return(c(
      rep(1, nf), # kappa
      diag(diag(nf)), # sigma
      rep(0, nf), # theta
      0.600, # lambda
      rep(0.000524, nmat) # measurement error (# maturities)
    ))
  }
}
init_para_un<-init_para()

# EPM (DNS) factor loading matrix 
EPM.B <- function(lambda, t, vT, n)
{
  col1 <- rep.int(1, length(vT))
  v <- cbind(col1)
  for (i in 0:n) {
    if (i == 0) {
      col1 <- ((1 - exp(-lambda * (vT - t))) / (lambda * (vT - t)))
      v <- cbind(v, col1)
    }
    if (i != 0) {
      col1 <- (i) * col1 -
        ((((
          lambda * (vT - t)
        ) ^ (i)) / (lambda * (vT - t)) * exp(-lambda * (vT - t))))
      v <- cbind(v, col1)
    }
  }
  return(v)
}

# yield adjustment term in AFNS
AFNS.EPM.C<-function(sigma, lambda, t, v.mat, n){
  timeArray<-array()
  for (m in 1:length(vT)) {
    EPM.B.Matrix <- matrix(nrow = (nf), ncol = (nf))
    if(sigma_type=="triangular"){
      trianMat<-lower.tri(EPM.B.Matrix, diag = TRUE)
    } else if(sigma_type=="symmetric") {
      trianMat<-matrix(TRUE, nf, nf)
    } else if(sigma_type=="diagonal") {
      trianMat<-matrix(as.logical(diag(nf)), nf, nf)
    }
    for (k in 1:(nf)) {
      for (l in 1:(nf)) {
        EPM.B <- function(s) {
          arrayB <- array()
          element <- -(vT[m] - s)
          arrayB <- c(element)
          for (i in 0:n) {
            if (i == 0) {
              col1 <- ((1 - exp(-lambda * (vT[m] - s))) / (lambda * (vT[m] - s)))
              element <- -(vT[m] - s) * col1
              arrayB <- append(arrayB, element)
            }
            if (i != 0) {
              col1 <- (i) * col1 -
                ((((
                  lambda * (vT[m] - s)
                ) ^ (i)) / (lambda * (vT[m] - s)) * exp(-lambda * (vT[m] - s))))
              element <- -(vT[m] - s) * col1
              arrayB <- append(arrayB, element)
            }
          }
          if(trianMat[k,l]==TRUE){
            product <- (arrayB[k] * arrayB[l])
            return((product))
          }
        }
        if((trianMat[k,l])==TRUE &&(k==l)){
          EPM.B.Matrix[k, l] <-
            -(1 / 2) * 1 / (vT[m] - t) * integrate(Vectorize(EPM.B), lower = t, upper =
                                                     vT[m])$value
        } else if((trianMat[k,l]==TRUE) &&(k!=l)){
          EPM.B.Matrix[k, l] <- -1 / (vT[m] - t) * integrate(Vectorize(EPM.B), lower = t, upper =
                                                               vT[m])$value
        }
      }
    }
    finalSum<-0
    mat <- matrix(nrow = (nf), ncol = (nf))
    diag<-c(diag(EPM.B.Matrix))
    sumProductRow<-c()
    squareSumRows<-rowSums((sigma)^2)
    if(sigma_type=="triangular"){
      trianMat<-lower.tri(mat, diag = FALSE)
    } else if(sigma_type=="symmetric") {
      trianMat<-lower.tri(mat, diag = FALSE) + upper.tri(mat, diag = FALSE)
    } else if(sigma_type=="diagonal") {
      trianMat<-matrix(as.logical(rep(0, nf*nf)), nf, nf)
    }
    # diagonal elements
    finalSum<-finalSum+crossprod(diag, squareSumRows)
    # non-diagonal elements
    EPM.B.Array<-c()
    for (i in 1:(nf)) {
      for (j in 1:(nf)) {
        if(i!=j){
          if(trianMat[j,i]==TRUE){
            sumProductRow<-c(sumProductRow,
                             sigma[i,] %*% sigma[j,])
            EPM.B.Array<-c(EPM.B.Array, EPM.B.Matrix[j,i] )
          }
        }
      }
    }
    if(sigma_type=="diagonal"){
      EPM.B.Array<-0
      sumProductRow<-0
    }
    finalSum<-finalSum+crossprod(EPM.B.Array, sumProductRow)
    timeArray<-append(timeArray,finalSum)
  }
  timeArray <- timeArray[!is.na(timeArray)]
  return(timeArray)
} 

nmat <- length(v.mat) # length of maturities
nobs <- nrow(m.spot)  # length of observations
gm.factor <- matrix(0,nobs,nf)
npara <- length(init_para_un) # length of parameters

# parameter restrictions
trans<-function(b)
{
  bb <- b
  bb[1]  <- 1/(1+exp(b[1]))  # kappa11
  if (sigma_type=="triangular" | sigma_type=="symmetric") {
    bb[(nf*(nf+3)/2+1+nf)]<-bb[(nf*(nf+3)/2+1+nf)]^2          # lambda
    bb[(nf*(nf+3)/2+2+nf):npara]<- bb[(nf*(nf+3)/2+2+nf):npara]^2          # measurement error
    return(bb)
  } else if (sigma_type=="diagonal") {
    bb[(3*nf+1)]<-bb[(3*nf+1)]^2          # lambda
    bb[(3*nf+2):npara]<- bb[(3*nf+2):npara]^2          # measurement error
    return(bb)
  }
}

# log likelihood function
loglike<-function(para_un,m.spot)
{
  para <- trans(para_un)
  # restricted parameters
  kappa  <- diag(para[1:nf])
  if (sigma_type=="triangular") { 
    sigma <- low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])
    theta  <- para[(nf*(nf+3)/2+1):(nf*(nf+3)/2+nf)]
    lambda <- para[(nf*(nf+3)/2+1+nf)]
    H      <- diag(para[(nf*(nf+3)/2+2+nf):npara])
  } else if (sigma_type=="symmetric") {
    sigma <- t(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)]))+low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])-diag(diag(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])))
    theta  <- para[(nf*(nf+3)/2+1):(nf*(nf+3)/2+nf)]
    lambda <- para[(nf*(nf+3)/2+1+nf)]
    H      <- diag(para[(nf*(nf+3)/2+2+nf):npara])
  } else if (sigma_type=="diagonal") {
    sigma <- diag(para[(nf+1):(2*nf)])
    theta  <- para[(2*nf+1):(3*nf)]
    lambda <- para[(3*nf+1)]
    H      <- diag(para[(3*nf+2):npara])
  }
  B  <- EPM.B(lambda, t, v.mat, n);
  tB <- t(B) # factor loading matrix
  C  <- AFNS.EPM.C(sigma, lambda, t, v.mat, n)   # yield adjustment
  # Conditional and Unconditional covariance matrix : Q, Q0
  m    <- eigen(kappa)
  eval <- m$values # diag(kappa)
  evec <- m$vectors; # diag(nf)
  ievec<-solve(evec)
  Smat <- ievec%*%sigma%*%t(sigma)%*%t(ievec)
  Vdt  <- Vinf <- matrix(0,nf,nf)
  for(i in 1:nf) { for(j in 1:nf) {
    Vdt[i,j] <-Smat[i,j]*(1-exp(-(eval[i]+eval[j])*dt))/
      (eval[i]+eval[j]) # conditional
    Vinf[i,j]<-Smat[i,j]/(eval[i]+eval[j]) # unconditional
  }
  }
  # Analytical Covariance matrix
  # Q : conditional, Q0 : unconditional
  Q  <- evec%*%Vdt%*%t(evec)
  Q0 <- evec%*%Vinf%*%t(evec)
  # initialzation of vector and matrix
  prevX <- theta; 
  prevV <- Q0
  Phi1  <- expm(-kappa*dt)
  Phi0  <- (diag(nf)-Phi1)%*%theta
  loglike <- 0 # log likelihood function
  for(i in 1:nobs) {
    Xhat <- Phi0+Phi1%*%prevX        # predicted state
    Vhat <- Phi1%*%prevV%*%t(Phi1)+Q # predicted cov
    y        <- m.spot[i,] # the observed yield
    yimplied <- B%*%Xhat+C # the model-implied yields
    er       <- y-yimplied # prediction error
    # updating
    ev <- B%*%Vhat%*%tB+H; 
    iev<-solve(ev)
    KG <- Vhat%*%tB%*%iev # Kalman Gain
    prevX <- Xhat+KG%*%er       # E[X|y_t]   updated state
    prevV <- Vhat-KG%*%B%*%Vhat # Cov[X|y_t] updated cov
    # log likelihood function
    loglike <- loglike - 0.5*(nmat)*log(2*pi)-
      0.5*log(det(ev))-0.5*t(er)%*%iev%*%er
    gm.factor[i,] <<- prevX
  }
  return(-loglike)
}

#-------------------------------------------------------------------------------

# constraints
m<-constrOptim(init_para_un, loglike, ui = diag(rep(1,25)),
               ci=rep(0,25), 
               control = list(maxit=5000, trace=2),
               method = "Nelder-Mead", outer.iterations = 1, outer.eps = 1e-05,
               hessian = FALSE, m.spot=m.spot)

# without constraints
m<-optim(init_para_un,loglike,
         control = list(maxit=5000, trace=2),
         method=c("Nelder-Mead"),m.spot=m.spot) #c("SANN") #hessian = TRUE
prev_likev <- m$value
v.likev    <- m$value

vif<-lm(gm.factor[,1]~gm.factor[,2]+gm.factor[,3]+gm.factor[,4])
vif(vif)

#-------------------------------------------------------------------------------

NSf <- function(lambda, tm) {
  aux <- tm/lambda
  X <- array(1, dim = c(length(tm), 3L))
  X[, 2L] <- (1 - exp(-aux))/aux
  X[, 3L] <- ((1 - exp(-aux))/aux) - exp(-aux)
  X
}

factor_loadings<-function(lambda, tm){
  aux <- tm*lambda
  X <- array(1, dim = c(length(tm), 4L))
  X[, 2L] <- (1 - exp(-aux))/aux
  X[, 3L] <- ((1 - exp(-aux))/aux) - exp(-aux)
  X[, 4L] <- ((2 - 2*exp(-aux))/aux) - aux*exp(-aux)-2*exp(-aux)
  X
}

#-------------------------------------------------------------------------------

# partial log likelihood function
liloglike<-function(para_un, m.spot)
{
  para <- trans(para_un)
  # restricted parameters
  kappa  <- diag(para[1:nf])
  if (sigma_type=="triangular") { 
    sigma <- low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])
    theta  <- para[(nf*(nf+3)/2+1):(nf*(nf+3)/2+nf)]
    lambda <- para[(nf*(nf+3)/2+1+nf)]
    H      <- diag(para[(nf*(nf+3)/2+2+nf):npara])
  } else if (sigma_type=="symmetric") {
    sigma <- t(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)]))+low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])-diag(diag(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])))
    theta  <- para[(nf*(nf+3)/2+1):(nf*(nf+3)/2+nf)]
    lambda <- para[(nf*(nf+3)/2+1+nf)]
    H      <- diag(para[(nf*(nf+3)/2+2+nf):npara])
  } else if (sigma_type=="diagonal") {
    sigma <- diag(para[(nf+1):(2*nf)])
    theta  <- para[(2*nf+1):(3*nf)]
    lambda <- para[(3*nf+1)]
    H      <- diag(para[(3*nf+2):npara])
  }
  B  <- EPM.B(lambda, t, v.mat, n);
  tB <- t(B) # factor loading matrix
  C  <- AFNS.EPM.C(sigma, lambda, t, v.mat, n)   # yield adjustment
  # Conditional and Unconditional covariance matrix : Q, Q0
  m    <- eigen(kappa)
  eval <- m$values
  evec <- m$vectors; 
  ievec<-solve(evec)
  Smat <- ievec%*%sigma%*%t(sigma)%*%t(ievec)
  Vdt  <- Vinf <- matrix(0,nf,nf)
  for(i in 1:nf) { for(j in 1:nf) {
    Vdt[i,j] <-Smat[i,j]*(1-exp(-(eval[i]+eval[j])*dt))/
      (eval[i]+eval[j]) # conditional
    Vinf[i,j]<-Smat[i,j]/(eval[i]+eval[j]) # unconditional
  }
  }
  # Analytical Covariance matrix
  # Q : conditional, Q0 : unconditional
  Q  <- evec%*%Vdt%*%t(evec)
  Q0 <- evec%*%Vinf%*%t(evec)
  # initialzation of vector and matrix
  prevX <- theta; 
  prevV <- Q0
  Phi1  <- expm(-kappa*dt)
  Phi0  <- (diag(nf)-Phi1)%*%theta
  Xhat <- Phi0+Phi1%*%prevX        # predicted state
  Vhat <- Phi1%*%prevV%*%t(Phi1)+Q # predicted cov
  y        <- m.spot[i,] # the observed yield
  yimplied <- B%*%Xhat+C # the model-implied yields
  er       <- y-yimplied # prediction error
  # updating
  ev <- B%*%Vhat%*%tB+H; 
  iev<-solve(ev)
  KG <- Vhat%*%tB%*%iev # Kalman Gain
  prevX <- Xhat+KG%*%er       # E[X|y_t]   updated state
  prevV <- Vhat-KG%*%B%*%Vhat # Cov[X|y_t] updated cov
  # log likelihood function
  loglike <- -0.5*(nmat)*log(2*pi)-
    0.5*log(det(ev))-0.5*t(er)%*%iev%*%er
  return(-loglike)
}

L<-matrix(0, length(m$par), length(m$par))
for(i in 1:nobs) {
  jac<-jacobian(liloglike, m$par, m.spot=m.spot)
  mul<-t(jac)%o%jac # outer product
  L<-L+matrix(cbind(mul), length(m$par), length(m$par))
  print(i)
}

#-------------------------------------------------------------------------------

covMat<-function(para_un)
{
  para <- trans(para_un)
  # restricted parameters
  kappa  <- diag(para[1:nf])
  if (sigma_type=="triangular") { 
    sigma <- low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])
    lambda <- para[(nf*(nf+3)/2+1+nf)]
  } else if (sigma_type=="symmetric") {
    sigma <- t(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)]))+
      low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])-
      diag(diag(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])))
    lambda <- para[(nf*(nf+3)/2+1+nf)]
  } else if (sigma_type=="diagonal") {
    sigma <- diag(para[(nf+1):(2*nf)])
    lambda <- para[(3*nf+1)]
  }
  # Conditional covariance matrix : Q
  eval <- eigen(kappa)$values # diag(kappa)
  evec <- eigen(kappa)$vectors; # diag(nf)
  ievec<-solve(evec)
  Smat <<- ievec%*%sigma%*%t(sigma)%*%t(ievec)
  var_mat<-matrix(0, nobs, nmat)
  for (z in 1:nmat) {
    B  <- EPM.B(lambda, t, v.mat[z], n); # factor loading matrix
    for (v in 1:nobs) {
      Vdt <- matrix(0,nf,nf)
      for(i in 1:nf) { 
        for(j in 1:nf) {
          Vdt[i,j] <-Smat[i,j]*(1-exp(-(eval[i]+eval[j])*dt*(v-1)))/(eval[i]+eval[j]) # conditional
        }
      }
      # Analytical Covariance matrix
      # Q : conditional
      Q  <- evec%*%Vdt%*%t(evec)
      var_sum<-0
      for(i in 1:nf) { 
        for(j in 1:nf) {
          var_sum<-var_sum+B[i]*B[j]*Q[i,j]
        }
      }
      var_mat[v,z]<-var_sum
    }
  }
  return(var_mat)
}

covMat<-covMat(m$par)

#-------------------------------------------------------------------------------

g_than<-0
l<-loglike(m$par,m.spot = m.spot)
for(i in 1:1000){
  q<-m$par+runif(length(m$par), -0.05, 0.05)
  ll<-loglike(m$par+r,m.spot = m.spot)
  if(l>ll){
    g_than=g_than+1
  }
}

# create column with parameter names
parameter_names<-function(nf)
{ 
  pn <- c()
  if (sigma_type=="triangular" | sigma_type=="symmetric") { 
    for(x in 1:nf){
      pn<-c(pn, sprintf("kappa_%d%d", x, x))
    }
    for(x in 1:nf){
      for(y in 1:x){
        pn<-c(pn, sprintf("sigma_%d%d", x, y))
      }
    }
    for(x in 1:nf){
      pn<-c(pn, sprintf("theta_%d", x))
    }
    pn<-c(pn, "lambda")
    for(x in 1:nmat){
      pn<-c(pn, sprintf("epsilon_%d", x))  
    }
    return(pn)
  } else if (sigma_type=="diagonal") {
    for(x in 1:nf){
      pn<-c(pn, sprintf("kappa_%d%d", x, x))
    }
    for(x in 1:nf){
      pn<-c(pn, sprintf("sigma_%d%d", x, x))
    }
    for(x in 1:nf){
      pn<-c(pn, sprintf("theta_%d", x))
    }
    pn<-c(pn, "lambda")
    for(x in 1:nmat){
      pn<-c(pn, sprintf("epsilon_%d", x))  
    }
    return(pn)
  }
}

# Delta method for statistical inference
grad<- jacobian(trans, m$par)
vcv_con<-grad%*%chol2inv(L)%*%t(grad)

# parameter | std.err | t-value | p-value
theta<-trans(m$par)
stderr<-sqrt(diag(vcv_con)) # abs()
tstat<-theta/stderr
pvalue<-2*pt(-abs(tstat),df=nobs-npara)
df.est<-cbind(round(theta,4), round(stderr,8), round(tstat,4), round(pvalue,4))

# print the final estimates
row.names(df.est)<-parameter_names(nf)
colnames(df.est)<-c("parameter","std.err","t-stat","p-value")
print(df.est)

# the yield to maturity of a zero-coupon bond
yield_to_maturity<-function(X, lambda, n){ # tau=T-t and t<-0
  Y<-c()
  for (tau in vT) {
    Ik<-function(k){
      if (k == 0){
        return(1/lambda*(1-exp(-lambda*tau))) #I0
      }
      s<-0
      for(j in 0:k){
        s<-s+((lambda*tau)^j/factorial(j))
      }
      I<-factorial(k)/lambda*(1-(exp(-lambda*tau)*s))
      return(I)
    }
    if (sigma_type=="triangular") { 
      sigma <- low_tri_matrix_c_r(trans(m$par)[(nf+1):(nf*(nf+3)/2)])
    } else if (sigma_type=="symmetric") {
      sigma <- t(low_tri_matrix_c_r(trans(m$par)[(nf+1):(nf*(nf+3)/2)]))+low_tri_matrix_c_r(trans(m$par)[(nf+1):(nf*(nf+3)/2)])-diag(diag(low_tri_matrix_c_r(trans(m$par)[(nf+1):(nf*(nf+3)/2)])))
    } else if (sigma_type=="diagonal") {
      sigma <- diag(trans(m$par)[(nf+1):(2*nf)])
    }
    y_t<-function(tau){
      y<-X[,1]+X[,2]*((1-exp(-lambda*tau))/(lambda*tau))
      for(i in 3:(n+2)){
        y<-y+X[,i]*((-((lambda*tau))^n*exp(-lambda*tau))/(lambda*tau)+(n*Ik(n-1))/tau)
      }
      # +(C_final[match(tau,vT)])
      y<-y+AFNS.EPM.C(sigma, df.est[df.est$parameter == 'lambda', 2], t, v.mat, n)[match(tau,vT)]
      return(y)
    }
    Y<-c(Y,y_t(tau))
  }
  return(Y)
}

ytm<-matrix(yield_to_maturity(gm.factor, df.est[df.est$parameter == 'lambda', 2], n), 
            length(gm.factor[,1]), byrow=FALSE)

# MSE and RMSE
error_mse<-c()
error_rmse<-c()
for(idx in 1:length(vT)){
  error_mse<-c(error_mse, mse(as.vector(unlist(df.spot[,(idx+1)])), ytm[,idx]))
  error_rmse<-c(error_rmse, rmse(as.vector(unlist(df.spot[,(idx+1)])), ytm[,idx]))
}
print(round(error_rmse,3))
print(round(median(error_rmse),3))

print(round(abs(C_final),3))
round(abs(C_final)/error_rmse,4)

# tau t y - csv
ey<-as.vector(ytm)
covVec<-as.vector(covMat)
namm<-c()
for (i in v.mat) {
  namm<-c(namm,rep(i,nobs))
}
namt<-rep(seq(1:nobs),nmat)
z<-qnorm(0.975,mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) # 0.975
covVecH<-ey+z*(covVec) # /sqrt(nobs)
covVecD<-ey-z*(covVec) # /sqrt(nobs)

# limit values
# n=2 diagonal

s<-Smat
b<-s[1,1]/(2*trans(m$par)[1])+s[2,2]/(2*trans(m$par)[2])+(2*s[1,2])/(trans(m$par)[1]+trans(m$par)[2])
c<-s[1,1]/(2*trans(m$par)[1])

# n=1 diagonal
s<-diag(trans(m$par)[4:6])%*%t(diag(trans(m$par)[4:6]))
b<-s[1,1]/(2*trans(m$par)[1])+s[2,2]/(2*trans(m$par)[2])+(2*s[1,2])/(trans(m$par)[1]+trans(m$par)[2])
c<-s[1,1]/(2*trans(m$par)[1])

# n=1 symmetric
s<-Smat
b<-s[1,1]/(2*trans(m$par)[1])+s[2,2]/(2*trans(m$par)[2])+(2*s[1,2])/(trans(m$par)[1]+trans(m$par)[2])
c<-s[1,1]/(2*trans(m$par)[1])

w_11<-df.est[df.est$parameter == 'sigma_11', 2]^2+df.est[df.est$parameter == 'sigma_21', 2]^2+df.est[df.est$parameter == 'sigma_31', 2]^2
w_22<-df.est[df.est$parameter == 'sigma_21', 2]^2+df.est[df.est$parameter == 'sigma_22', 2]^2+df.est[df.est$parameter == 'sigma_32', 2]^2
w_12<-df.est[df.est$parameter == 'sigma_11', 2]*df.est[df.est$parameter == 'sigma_21', 2]+
  df.est[df.est$parameter == 'sigma_21', 2]*df.est[df.est$parameter == 'sigma_22', 2]+
  df.est[df.est$parameter == 'sigma_31', 2]*df.est[df.est$parameter == 'sigma_32', 2]
b<-w_11/(2*trans(m$par)[1])+w_22/(2*trans(m$par)[2])+(2*w_12)/(trans(m$par)[1]+trans(m$par)[2])
c<-w_11/(2*trans(m$par)[1])


#adjusted-yield term
para<-trans(m$par)
if (sigma_type=="triangular") { 
  sigma <- low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])
  lambda <- para[(nf*(nf+3)/2+1+nf)]
} else if (sigma_type=="symmetric") {
  sigma <- t(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)]))+low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])-diag(diag(low_tri_matrix_c_r(para[(nf+1):(nf*(nf+3)/2)])))
  lambda <- para[(nf*(nf+3)/2+1+nf)]
} else if (sigma_type=="diagonal") {
  sigma <- diag(para[(nf+1):(2*nf)])
  lambda <- para[(3*nf+1)]
}
round(abs(AFNS.EPM.C(sigma,lambda,t,v.mat,n)/132),4)
